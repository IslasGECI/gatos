#!/usr/bin/env python
#
# histogramaCapturasPorAnioGatosSocorro lee datos en CSV y genera hitogramas de la cantidad de esfuerzo por a√±o.
import os
import sys

import matplotlib.pyplot as plt
import matplotlib
import pandas as pd
import numpy as np

nombre_archivo_entrada = sys.argv[1]
#nombre_imagen_salida = sys.argv[2]
posiciones_barras = np.linspace(1,17,9)
tamano_fuente = 15

datos_gatos_socorro = pd.read_csv(f'{nombre_archivo_entrada}')
valores_anios = ["2011", "2012","2013", "2014","2015", "2016","2017", "2018","2019"]

esfuerzo_acumulado_anual=[]
gatos_erradicados=[]
CPUE=[] 
#gatos_erradicados/esfuerzo_acumulado_anual
for i in valores_anios:
    mask = datos_gatos_socorro['fecha'].str.contains(i)
    esfuerzo_acumulado_anual.append(np.sum( datos_gatos_socorro['esfuerzo'].values[mask]))
    gatos_erradicados.append(np.sum( datos_gatos_socorro['capturas'].values[mask]))
    CPUE.append(np.sum( datos_gatos_socorro['capturas'].values[mask])/np.sum( datos_gatos_socorro['esfuerzo'].values[mask]))

fig, ax= plt.subplots(figsize=(11, 8))
plt.plot(posiciones_barras,CPUE,'-o')
plt.xticks(posiciones_barras, valores_anios)
ax.set_ylabel('Catch Per Unit Effort (CPUE)',fontsize=tamano_fuente)
ax.set_xlim(6.95, 17.03)
ax.set_ylim(0, 0.014)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
#for i in range(len(esfuerzo_acumulado_anual)):
#    plt.text(x = posiciones_barras[i]-.6 , y = esfuerzo_acumulado_anual[i]+500, s = format(esfuerzo_acumulado_anual[i], ','), size = 12)
#ax.tick_params(labelsize=tamano_fuente)
#ax.get_yaxis().set_major_formatter(
#    matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))

#ax2 = ax.twinx()

#ax2.set_ylabel('No. cats dispatched',fontsize=tamano_fuente)
#ax2.plot(posiciones_barras,gatos_erradicados,c='black',marker="D")
#ax2.set_ylim(0, 140)
#for i in range(len(gatos_erradicados)):
#    plt.text(x = posiciones_barras[i]-0.25, y = gatos_erradicados[i]+5, s = gatos_erradicados[i], size = 12)
#ax2.tick_params(labelsize=tamano_fuente)
#ax2.spines['top'].set_visible(False)

#plt.savefig(f"{nombre_imagen_salida}", dpi=300)  
plt.savefig("pngCPUEanual.png", dpi=300)
